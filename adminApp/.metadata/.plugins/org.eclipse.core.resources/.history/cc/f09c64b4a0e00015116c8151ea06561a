package partwhere.admin.gui;

import java.awt.EventQueue;

import javax.swing.JFrame;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import partwhere.admin.sql.DBConnection;
import partwhere.admin.sql.DataManager;
import partwhere.admin.sql.Part;
import partwhere.admin.sql.PartType;

import java.awt.GridBagLayout;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;

import java.awt.event.KeyEvent;
import java.util.Map;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import javax.swing.JSplitPane;
import java.awt.GridBagConstraints;
import javax.swing.JTree;
import javax.swing.JTabbedPane;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.JPopupMenu;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class PWAMainWindow implements TreeSelectionListener {

	private Logger logger = LogManager.getLogger();
	private JFrame frmPartwhereAdmin;
	private JTree tree;
	private TreeModel treeModel;
	private DefaultMutableTreeNode root = null;
	private JTabbedPane tabbedPane = null;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PWAMainWindow window = new PWAMainWindow();
					window.frmPartwhereAdmin.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public PWAMainWindow() {
		initialize();
	}

	public JFrame getFrmPartwhereAdmin() {
		return frmPartwhereAdmin;
	}

	/**
	 * Initialize the contents of the frame.
	 */
	@SuppressWarnings("serial")
	private void initialize() {
		logger.info("Initializing Main Window.");
		frmPartwhereAdmin = new JFrame();
		frmPartwhereAdmin.setTitle("PartWhere Admin");
		frmPartwhereAdmin.setBounds(100, 100, 614, 526);
		frmPartwhereAdmin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{0, 0};
		gridBagLayout.rowHeights = new int[]{0, 0};
		gridBagLayout.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{1.0, Double.MIN_VALUE};
		frmPartwhereAdmin.getContentPane().setLayout(gridBagLayout);
		
		JSplitPane splitPane = new JSplitPane();
		splitPane.setResizeWeight(0.2);
		GridBagConstraints gbc_splitPane = new GridBagConstraints();
		gbc_splitPane.fill = GridBagConstraints.BOTH;
		gbc_splitPane.gridx = 0;
		gbc_splitPane.gridy = 0;
		frmPartwhereAdmin.getContentPane().add(splitPane, gbc_splitPane);
		
		tree = new JTree();
		root = new DefaultMutableTreeNode("Part Types") {
			{
			}
		};
		tree.addTreeSelectionListener(this);
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		treeModel = new DefaultTreeModel(root);
		tree.setModel(treeModel);
		tree.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getClickCount() >= 2)
				{
					DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
			                tree.getLastSelectedPathComponent();
					if(selectedNode != null)
					{
						Object selectedObject = selectedNode.getUserObject();
						if(selectedObject instanceof PartType)
						{
							// display Part Type editor
							showPartTypeEditor((PartType)selectedObject, false);
						}
						else if (selectedObject instanceof Part)
						{
							// display Part Editor
						}
					}
				}
			}
		});
		loadPartTypes();
		splitPane.setLeftComponent(tree);
		
		JPopupMenu popupMenu = new JPopupMenu();
		addPopup(tree, popupMenu);
		
		JMenuItem mntmAddPartType = new JMenuItem("Add Part Type");
		mntmAddPartType.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// add a new part type
				
			}
		});
		popupMenu.add(mntmAddPartType);
		
		JMenuItem mntmAddPart = new JMenuItem("Add Part");
		popupMenu.add(mntmAddPart);
		
		tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		splitPane.setRightComponent(tabbedPane);
		
		JMenuBar menuBar = new JMenuBar();
		frmPartwhereAdmin.setJMenuBar(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mntmExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_MASK));
		mnFile.add(mntmExit);
	}
	
	private void loadPartTypes()
	{
		if(DBConnection.getInstance().loadPartTypes(DataManager.getInstance()))
		{
			Map<Long, PartType> partTypes = DataManager.getInstance().getLoadedPartTypes();
			if(!partTypes.isEmpty())
			{
				for(PartType type : partTypes.values())
				{
					addPartTypeToTree(type, root);
				}
			}
		}
	}
	
	private void createPartType()
	{
		PartType newPartType = new PartType();
		newPartType.setName("New Part Type");
		DefaultMutableTreeNode parent = root;
		if(tree.getSelectionCount() == 1)
		{
			parent = (DefaultMutableTreeNode) tree.getSelectionPath().getLastPathComponent();
			PartType parentType = (PartType)parent.getUserObject();
			if(parentType != null)
			{
				newPartType.setParent(parentType);
			}
		}
		DefaultMutableTreeNode newType = new DefaultMutableTreeNode(newPartType);
		parent.add(newType);
		showPartTypeEditor(newPartType, true);
	}
	
	private void addPartTypeToTree(PartType type, DefaultMutableTreeNode parent) {
		
		DefaultMutableTreeNode newType = new DefaultMutableTreeNode(type);
		parent.add(newType);
		for(PartType child: type.getChildren())
		{
			addPartTypeToTree(child, newType);
		}
	}

	private void addPartToTree(Part part, DefaultMutableTreeNode parent) {
		
		DefaultMutableTreeNode newType = new DefaultMutableTreeNode(part);
		parent.add(newType);
	}

	@Override
	public void valueChanged(TreeSelectionEvent e) {
		DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)
                tree.getLastSelectedPathComponent();
		if(selectedNode != null)
		{
			Object selectedObject = selectedNode.getUserObject();
			if(selectedObject instanceof PartType)
			{
				// does this part have children?
				PartType selPart = (PartType)selectedObject;
				if(selPart.getChildren().isEmpty())
				{
					Map<Long, Part> partsForType = DataManager.getInstance().getLoadedPartsForType(selPart.getPartTypeId());
					if(partsForType == null)
					{
						// load associated parts
						if(DBConnection.getInstance().loadParts(selPart.getPartTypeId(),
								DataManager.getInstance()) > 0)
						{
							partsForType = DataManager.getInstance().getLoadedPartsForType(selPart.getPartTypeId());
						}
					}
					if(partsForType != null)
					{
						for(Part child: partsForType.values())
						{
							addPartToTree(child, selectedNode);
						}
					}
				}
			}
		}
		
	}

	private static void addPopup(Component component, final JPopupMenu popup) {
		component.addMouseListener(new MouseAdapter() {
			public void mousePressed(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			public void mouseReleased(MouseEvent e) {
				if (e.isPopupTrigger()) {
					showMenu(e);
				}
			}
			private void showMenu(MouseEvent e) {
				popup.show(e.getComponent(), e.getX(), e.getY());
			}
		});
	}
	
	private void showPartEditor(Part partToEdit, boolean addNew)
	{
		
	}


	private void showPartTypeEditor(PartType partTypeToEdit, boolean addNew)
	{
		PartTypeEditorPanel panel = new PartTypeEditorPanel(this);
		panel.setPartType(partTypeToEdit);
		String name = partTypeToEdit.getName();
		if(addNew)
		{
			name = "New Part";
		}
		tabbedPane.addTab(name, panel);
	}

	public boolean updatePartType(PartType partType, boolean nameChanged) {
		// save changes to database
		boolean success = DBConnection.getInstance().savePartType(partType, DataManager.getInstance()); 
		// new part type
		if(success)
		{
			// if name changed, update tree and tab name
			if(nameChanged)
			{
				tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(), partType.getName());
				tree.updateUI();
			}			
		}
		else
		{
			// database save failed
			JOptionPane.showMessageDialog(tabbedPane, "Failed to save part type to the database. "
					+ " See error log for more details.");
		}
		return success;
	}
}
